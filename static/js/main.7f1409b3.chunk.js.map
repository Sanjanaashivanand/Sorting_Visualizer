{"version":3,"sources":["SortingAlgorithms/MergeSort.js","SortingVisualizer/SortingVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxArray","slice","mergeSortHelper","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","merge","React","Component","App","className","class","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mSAAO,SAASA,EAAuBC,GACnC,IAAMC,EAAa,GACnB,GAAID,EAAME,QAAU,EAAG,OAAOF,EAC9B,IAAMG,EAAWH,EAAMI,QAEvB,OADAC,EAAgBL,EAAO,EAAGA,EAAME,OAAO,EAAGC,EAAUF,GAC7CA,EAGX,SAASI,EAAgBL,EAAOM,EAAUC,EAAQJ,EAAUF,GACxD,GAAGK,IAAaC,EAAhB,CACA,IAAMC,EAAYC,KAAKC,OAAOJ,EAAWC,GAAQ,GACjDF,EAAgBF,EAAUG,EAAUE,EAAWR,EAAOC,GACtDI,EAAgBF,EAAUK,EAAU,EAAGD,EAAQP,EAAOC,GAI1D,SAAeD,EAAOM,EAAUE,EAAWD,EAAQJ,EAAUF,GACzD,IAAIU,EAAIL,EACJM,EAAIN,EACJO,EAAIL,EAAY,EACpB,KAAMI,GAAGJ,GAAaK,GAAGN,GACrBN,EAAWa,KAAK,CAACF,EAAEC,IACnBZ,EAAWa,KAAK,CAACF,EAAEC,IAChBV,EAASS,IAAMT,EAASU,IACvBZ,EAAWa,KAAK,CAACH,EAAGR,EAASU,KAC7Bb,EAAMW,KAAOR,EAASS,OAGtBX,EAAWa,KAAK,CAACH,EAAGR,EAASU,KAC7Bb,EAAMW,KAAOR,EAASU,MAG9B,KAAMD,GAAGJ,GACLP,EAAWa,KAAK,CAACF,EAAEA,IACnBX,EAAWa,KAAK,CAACF,EAAEA,IACnBX,EAAWa,KAAK,CAACH,EAAGR,EAASU,KAC7Bb,EAAMW,KAAMR,EAASS,KAEzB,KAAMC,GAAGN,GACLN,EAAWa,KAAK,CAACD,EAAEA,IACnBZ,EAAWa,KAAK,CAACD,EAAEA,IACnBZ,EAAWa,KAAK,CAACH,EAAGR,EAASU,KAC7Bb,EAAMW,KAAMR,EAASU,KA7BzBE,CAAMf,EAAOM,EAAUE,EAAWD,EAAQJ,EAAUF,I,2CCHTe,IAAMC,UCEtCC,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,oBAAIC,MAAM,MAAV,mCCKSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7f1409b3.chunk.js","sourcesContent":["export function getMergeSortAnimations(array){\n    const animations = [];\n    if (array.length <= 1) return array;\n    const auxArray = array.slice();\n    mergeSortHelper(array, 0, array.length-1, auxArray, animations);\n    return animations; \n}\n\nfunction mergeSortHelper(array, startIdx, endIdx, auxArray, animations){\n    if(startIdx === endIdx) return;\n    const middleIdx = Math.floor((startIdx + endIdx)/2);\n    mergeSortHelper(auxArray, startIdx, middleIdx, array, animations);\n    mergeSortHelper(auxArray, middleIdx+1, endIdx, array, animations);\n    merge(array, startIdx, middleIdx, endIdx, auxArray, animations);\n}\n\nfunction merge(array, startIdx, middleIdx, endIdx, auxArray, animations){\n    let k = startIdx;\n    let i = startIdx;\n    let j = middleIdx + 1;\n    while(i<=middleIdx && j<=endIdx){\n        animations.push([i,j]);\n        animations.push([i,j]);\n        if(auxArray[i] <= auxArray[j]){\n            animations.push([k, auxArray[j]]);\n            array[k++] = auxArray[i++];\n        }\n        else{\n            animations.push([k, auxArray[j]]);\n            array[k++] = auxArray[j++];\n        }\n    }\n    while(i<=middleIdx){\n        animations.push([i,i]);\n        animations.push([i,i]);\n        animations.push([k, auxArray[j]]);\n        array[k++]= auxArray[i++];\n    }\n    while(j<=endIdx){\n        animations.push([j,j]);\n        animations.push([j,j]);\n        animations.push([k, auxArray[j]]);\n        array[k++]= auxArray[j++];\n    }\n}","import React from 'react';\nimport './SortingVisualizer.css';\nimport {getMergeSortAnimations} from '../SortingAlgorithms/MergeSort.js'\nimport { BubbleSort} from '../SortingAlgorithms/BubbleSort';\nimport {Container,Row,Col,Button} from 'react-bootstrap';\n\nconst PRIMARY_COLOR = \"cyan\";\nconst SECONDARY_COLOR = \"green\";\n\n\nexport default class SortingVisualizer extends React.Component {\n    constructor(props){\n        super(props);\n\n        this.state = {\n            array: [],\n        };\n    }\n\n    componentDidMount(){\n        this.resetArray();\n    }\n\n    resetArray() {\n        const array = [];\n        for(let i=0;i<10;i++){\n            array.push(randomIntFromInterval(5, 75));\n        }\n        this.setState({array});\n    }\n\n    bubbleSort(){\n        BubbleSort(this.state.array);\n    }\n\n    mergeSort(){\n        const animations = getMergeSortAnimations(this.state.array);\n        for(let i=0;i<animations.length;i++){\n            const arrayBars = document.getElementsByClassName('array-bar');\n            const isChangeColor = i % 3 !== 2;\n            if(isChangeColor){\n                const [barOneIdx, barTwoIdx] = animations[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;\n                const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n                setTimeout(()=>{\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                }, i * 2);\n            } else {\n                setTimeout(()=>{\n                    const [barOneIdx, newHeight] = animations[i];\n                    const barOneStyle = arrayBars[barOneIdx].style;\n                    barOneStyle.height = `${newHeight}vh`;\n                }, i * 2);\n            }\n\n        }\n    }\n\n    render(){\n        const {array} =this.state;\n\n        return(\n            <Container>\n                <Row>\n                    <Col>{\n                        array.map((value,idx)=>(\n                            <div \n                                className=\"array-bar\" \n                                key={idx}\n                                style={{height: `${value}vh`}}>\n                            </div>\n                        ))\n                    }\n                    \n                    </Col>\n                </Row>\n                <Row className=\"p-3 m-2\">\n                    <Col>\n                        <Button variant=\"dark\" size=\"md\" onClick = {() => this.resetArray()}>Generate a new array</Button>\n                    </Col>\n                    <Col>\n                        <Button variant=\"dark\" size=\"md\" onClick={() => this.bubbleSort()}>Bubble Sort</Button>\n                    </Col>\n                    <Col>\n                        <Button variant=\"dark\" size=\"md\" onClick={() => this.mergeSort()}>Merge Sort</Button>\n                    </Col>\n                    <Col>\n                        <Button variant=\"dark\" size=\"md\">Quick Sort</Button>\n                    </Col>\n                    <Col>\n                        <Button variant=\"dark\" size=\"md\">Selection Sort</Button>\n                    </Col>\n                </Row>\n             </Container>\n        );\n    }\n}\n\nfunction randomIntFromInterval(min, max){\n    return Math.floor(Math.random() * (max-min +1) +min);\n}","import './App.css';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1 class=\"p-3\">SORTING VISUALIZER</h1>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}